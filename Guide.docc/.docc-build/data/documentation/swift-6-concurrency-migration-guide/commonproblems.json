{"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.migration.6\/documentation\/MigrationGuide"]]},"abstract":[{"text":"Identify, understand, and address common problems you’ll encounter while","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"working with Swift concurrency."}],"metadata":{"title":"Common Compiler Errors"},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.migration.6\/documentation\/Swift-6-Concurrency-Migration-Guide\/CommonProblems"},"primaryContentSections":[{"kind":"content","content":[{"type":"paragraph","inlineContent":[{"text":"The data isolation guarantees made by the compiler affect all Swift code.","type":"text"},{"type":"text","text":" "},{"text":"This means complete concurrency checking can surface latent issues,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even in Swift 5 code that doesn’t use any concurrency language features"},{"type":"text","text":" "},{"type":"text","text":"directly."},{"type":"text","text":" "},{"text":"And, with the Swift 6 language mode is on, some of these potential issues","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can become errors."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"After enabling complete checking, many projects can contain a large"},{"type":"text","text":" "},{"type":"text","text":"number of warnings and errors."},{"text":" ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Don’t","type":"text"}]},{"type":"text","text":" get overwhelmed!"},{"type":"text","text":" "},{"type":"text","text":"Most of these can be tracked down to a much smaller set of root causes."},{"text":" ","type":"text"},{"text":"And these causes, frequently, are a result of common patterns which aren’t","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"just easy to fix, but can also very instructive in helping to understand"},{"type":"text","text":" "},{"type":"text","text":"Swift’s data isolation model."}]},{"type":"heading","level":2,"text":"Unsafe Global and Static Variables","anchor":"Unsafe-Global-and-Static-Variables"},{"inlineContent":[{"text":"Global state, including static variables, are accessible from anywhere in a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"program."},{"text":" ","type":"text"},{"text":"This visibility makes them particularly susceptible to concurrent access.","type":"text"},{"text":" ","type":"text"},{"text":"Before data-race safety, global variable patterns relied on programmers","type":"text"},{"type":"text","text":" "},{"text":"carefully accessing global state in ways that avoided data-races","type":"text"},{"text":" ","type":"text"},{"text":"without any help from the compiler.","type":"text"}],"type":"paragraph"},{"name":"Experiment","style":"experiment","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"These code examples are available in package form.","type":"text"},{"text":" ","type":"text"},{"text":"Try them out yourself in ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-migration-guide\/blob\/main\/Sources\/Examples\/Globals.swift"},{"type":"text","text":"."}]}]},{"type":"heading","text":"Sendable Types","level":3,"anchor":"Sendable-Types"},{"syntax":"swift","code":["var supportedStyleCount = 42"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here, we have defined a global variable."},{"text":" ","type":"text"},{"text":"The global variable is both non-isolated ","type":"text"},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"text":" mutable from any","type":"text"},{"type":"text","text":" "},{"type":"text","text":"isolation domain. Compiling the above code in Swift 6 mode"},{"text":" ","type":"text"},{"type":"text","text":"produces an error message:"}],"type":"paragraph"},{"type":"codeListing","code":["1 | var supportedStyleCount = 42","  |              |- error: global variable 'supportedStyleCount' is not concurrency-safe because it is non-isolated global shared mutable state","  |              |- note: convert 'supportedStyleCount' to a 'let' constant to make the shared state immutable","  |              |- note: restrict 'supportedStyleCount' to the main actor if it will only be accessed from the main thread","  |              |- note: unsafely mark 'supportedStyleCount' as concurrency-safe if all accesses are protected by an external synchronization mechanism","2 |"],"syntax":null},{"inlineContent":[{"type":"text","text":"Two functions with different isolation domains accessing this"},{"type":"text","text":" "},{"type":"text","text":"variable risks a data race. In the following code, "},{"type":"codeVoice","code":"printSupportedStyles()"},{"text":" ","type":"text"},{"type":"text","text":"could be running on the main actor concurrently with a call to"},{"text":" ","type":"text"},{"code":"addNewStyle()","type":"codeVoice"},{"type":"text","text":" from another isolation domain:"}],"type":"paragraph"},{"type":"codeListing","code":["@MainActor","func printSupportedStyles() {","    print(\"Supported styles: \", supportedStyleCount)","}","","func addNewStyle() {","    let style = Style()","","    supportedStyleCount += 1","","    storeStyle(style)","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"One way to address the problem is by changing variable’s isolation."}]},{"code":["@MainActor","var supportedStyleCount = 42"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The variable remains mutable, but has been isolated to a global actor.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"All accesses can now only happen in one isolation domain, and the synchronous"},{"text":" ","type":"text"},{"text":"access within ","type":"text"},{"type":"codeVoice","code":"addNewStyle"},{"type":"text","text":" would be invalid at compile time."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"If the variable is meant to be constant and is never mutated,","type":"text"},{"type":"text","text":" "},{"text":"a straight-forward solution is to express this to the compiler.","type":"text"},{"text":" ","type":"text"},{"text":"By changing the ","type":"text"},{"code":"var","type":"codeVoice"},{"text":" to a ","type":"text"},{"type":"codeVoice","code":"let"},{"type":"text","text":", the compiler can statically"},{"type":"text","text":" "},{"type":"text","text":"disallow mutation, guaranteeing safe read-only access."}]},{"code":["let supportedStyleCount = 42"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If there is synchronization in place that protects this variable in a way that"},{"text":" ","type":"text"},{"type":"text","text":"is invisible to the compiler, you can disable all isolation checking for"},{"text":" ","type":"text"},{"code":"supportedStyleCount","type":"codeVoice"},{"type":"text","text":" using the "},{"type":"codeVoice","code":"nonisolated(unsafe)"},{"type":"text","text":" keyword:"}]},{"syntax":"swift","code":["\/\/\/ This value is only ever accessed while holding `styleLock`.","nonisolated(unsafe) var supportedStyleCount = 42"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Only use "},{"type":"codeVoice","code":"nonisolated(unsafe)"},{"text":" when you are carefully guarding all access to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the variable with an external synchronization mechanism such as a lock or"},{"type":"text","text":" "},{"type":"text","text":"dispatch queue."}],"type":"paragraph"},{"type":"heading","anchor":"Non-Sendable-Types","text":"Non-Sendable Types","level":3},{"type":"paragraph","inlineContent":[{"text":"In the above examples, the variable is an ","type":"text"},{"type":"codeVoice","code":"Int"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"a value type that is inherently "},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"text":"Global ","type":"text"},{"inlineContent":[{"type":"text","text":"reference"}],"type":"emphasis"},{"type":"text","text":" types present an additional challenge, because they"},{"text":" ","type":"text"},{"text":"are typically not ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."}]},{"syntax":"swift","type":"codeListing","code":["class WindowStyler {","    var background: ColorComponents","","    static let defaultStyler = WindowStyler()","}"]},{"inlineContent":[{"type":"text","text":"The problem with this "},{"type":"codeVoice","code":"static let"},{"type":"text","text":" declaration is not related to the"},{"text":" ","type":"text"},{"type":"text","text":"mutability of the variable."},{"type":"text","text":" "},{"type":"text","text":"The issue is "},{"code":"WindowStyler","type":"codeVoice"},{"text":" is a non-","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" type, making its internal state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"unsafe to share across isolation domains."}],"type":"paragraph"},{"code":["func resetDefaultStyle() {","    WindowStyler.defaultStyler.background = ColorComponents(red: 1.0, green: 1.0, blue: 1.0)","}","","@MainActor","class StyleStore {","    var stylers: [WindowStyler]","","    func hasDefaultBackground() -> Bool {","        stylers.contains { $0.background == WindowStyler.defaultStyler.background }","    }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here, we see two functions that could access the internal state of the"},{"text":" ","type":"text"},{"code":"WindowStyler.defaultStyler","type":"codeVoice"},{"text":" concurrently.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The compiler only permits these kinds of cross-isolation accesses with"},{"type":"text","text":" "},{"type":"codeVoice","code":"Sendable"},{"text":" types.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"One option is to isolate the variable to a single domain using a global actor."},{"text":" ","type":"text"},{"type":"text","text":"But, it could also make sense to instead add a conformance to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" "},{"text":"directly.","type":"text"}],"type":"paragraph"},{"text":"Protocol Conformance Isolation Mismatch","type":"heading","anchor":"Protocol-Conformance-Isolation-Mismatch","level":2},{"inlineContent":[{"text":"A protocol defines requirements that a conforming type must satisfy.","type":"text"},{"type":"text","text":" "},{"text":"Swift ensures that clients of a protocol can interact with its methods and","type":"text"},{"text":" ","type":"text"},{"text":"properties in a way that respects data isolation.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"To do this, both the protocol itself and its requirements must specify"},{"text":" ","type":"text"},{"type":"text","text":"static isolation."},{"type":"text","text":" "},{"type":"text","text":"This can result in isolation mismatches between a protocol’s declaration and"},{"type":"text","text":" "},{"type":"text","text":"conforming types."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are many possible solutions to this class of problem, but they often"},{"text":" ","type":"text"},{"text":"involve trade-offs.","type":"text"},{"text":" ","type":"text"},{"text":"Choosing an appropriate approach first requires understanding ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"why"}]},{"text":" there is a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mismatch in the first place."}],"type":"paragraph"},{"type":"aside","style":"experiment","name":"Experiment","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These code examples are available in package form."},{"text":" ","type":"text"},{"text":"Try them out yourself in ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/github.com\/apple\/swift-migration-guide\/blob\/main\/Sources\/Examples\/ConformanceMismatches.swift"},{"type":"text","text":"."}]}]},{"level":3,"text":"Under-Specified Protocol","anchor":"Under-Specified-Protocol","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The most commonly-encountered form of this problem happens when a protocol","type":"text"},{"type":"text","text":" "},{"text":"has no explicit isolation.","type":"text"},{"type":"text","text":" "},{"text":"In this case, as with all other declarations, this implies ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"non-isolated"}]},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Non-isolated protocol requirements can be called from generic code in any"},{"type":"text","text":" "},{"type":"text","text":"isolation domain. If the requirement is synchronous, it is invalid for"},{"type":"text","text":" "},{"text":"a conforming type’s implementation to access actor-isolated state:","type":"text"}]},{"syntax":"swift","code":["protocol Styler {","    func applyStyle()","}","","@MainActor","class WindowStyler: Styler {","    func applyStyle() {","        \/\/ access main-actor-isolated state","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The above code produces the following error in Swift 6 mode:"}],"type":"paragraph"},{"code":[" 5 | @MainActor"," 6 | class WindowStyler: Styler {"," 7 |     func applyStyle() {","   |          |- error: main actor-isolated instance method 'applyStyle()' cannot be used to satisfy nonisolated protocol requirement","   |          `- note: add 'nonisolated' to 'applyStyle()' to make this instance method not isolated to the actor"," 8 |         \/\/ access main-actor-isolated state"," 9 |     }"],"syntax":null,"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible that the protocol actually "},{"inlineContent":[{"type":"text","text":"should"}],"type":"emphasis"},{"text":" be isolated, but","type":"text"},{"type":"text","text":" "},{"type":"text","text":"just has not yet been updated for concurrency."},{"text":" ","type":"text"},{"type":"text","text":"If conforming types are migrated to add correct isolation first, mismatches"},{"type":"text","text":" "},{"type":"text","text":"will occur."}]},{"type":"codeListing","syntax":"swift","code":["\/\/ This really only makes sense to use from MainActor types, but","\/\/ has not yet been updated to reflect that.","protocol Styler {","    func applyStyle()","}","","\/\/ A conforming type, which is now correctly isolated, has exposed ","\/\/ a mismatch.","@MainActor","class WindowStyler: Styler {","}"]},{"level":4,"anchor":"Adding-Isolation","text":"Adding Isolation","type":"heading"},{"inlineContent":[{"type":"text","text":"If protocol requirements are always called from the main actor,"},{"type":"text","text":" "},{"type":"text","text":"adding "},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" is the best solution."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two ways to isolate a protocol requirement to the main actor:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ entire protocol","@MainActor","protocol Styler {","    func applyStyle()","}","","\/\/ per-requirement","protocol Styler {","    @MainActor","    func applyStyle()","}"]},{"type":"paragraph","inlineContent":[{"text":"Marking a protocol with a global actor attribute implies global actor isolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on all protocol requirements and extension methods. The global actor is also"},{"type":"text","text":" "},{"type":"text","text":"inferred on conforming types when the conformance is not declared in an"},{"type":"text","text":" "},{"text":"extension.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Per-requirement isolation has a narrower impact on actor isolation inference,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"because inference only applies to the implementation of that requirement. It"},{"text":" ","type":"text"},{"text":"does not impact the inferred isolation of protocol extensions or other methods","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"on the conforming type. This approach should be favored if it makes sense to"},{"type":"text","text":" "},{"text":"have conforming types that aren’t necessarily also tied to the same global actor.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Either way, changing the isolation of a protocol can affect the isolation of","type":"text"},{"text":" ","type":"text"},{"text":"conforming types and it can impose restrictions on generic code using the","type":"text"},{"text":" ","type":"text"},{"text":"protocol in a generic requirement. You can stage in diagnostics caused by","type":"text"},{"text":" ","type":"text"},{"text":"adding global actor isolation on a protocol using ","type":"text"},{"code":"@preconcurrency","type":"codeVoice"},{"type":"text","text":":"}]},{"code":["@preconcurrency @MainActor","protocol Styler {","    func applyStyle()","}"],"syntax":"swift","type":"codeListing"},{"level":4,"type":"heading","anchor":"Asynchronous-Requirements","text":"Asynchronous Requirements"},{"type":"paragraph","inlineContent":[{"text":"For methods that implement synchronous protocol requirements, either the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"isolation of method must match the isolation of the requirement exactly,"},{"type":"text","text":" "},{"text":"or the method must be ","type":"text"},{"type":"codeVoice","code":"nonisolated"},{"text":", meaning it can be called from","type":"text"},{"text":" ","type":"text"},{"text":"any isolation domain without risk of data races. Making a requirement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"asynchronous offers a lot more flexibility over the isolation in"},{"text":" ","type":"text"},{"text":"conforming types.","type":"text"}]},{"code":["protocol Styler {","    func applyStyle() async","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Because ","type":"text"},{"type":"codeVoice","code":"async"},{"type":"text","text":" methods guarantee isolation by switching to the corresponding"},{"type":"text","text":" "},{"type":"text","text":"actor in the implementation, it’s possible to satisfy a non-isolated "},{"code":"async","type":"codeVoice"},{"text":" ","type":"text"},{"text":"protocol requirement with an isolated method:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class WindowStyler: Styler {","    \/\/ matches, even though it is synchronous and actor-isolated","    func applyStyle() {","    }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The above code is safe, because generic code must always call "},{"type":"codeVoice","code":"applyStyle()"},{"text":" ","type":"text"},{"type":"text","text":"asynchronously, allowing isolated implementations to switch actors before"},{"text":" ","type":"text"},{"type":"text","text":"accessing actor-isolated state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this flexibility comes at a cost."},{"text":" ","type":"text"},{"type":"text","text":"Changing a method to be asynchronous can have a significant impact at"},{"text":" ","type":"text"},{"type":"text","text":"every call site."},{"type":"text","text":" "},{"text":"In addition to an async context, both the parameters and return values may","type":"text"},{"type":"text","text":" "},{"type":"text","text":"need to cross isolation boundaries."},{"type":"text","text":" "},{"type":"text","text":"Together, these could require significant structural changes to address."},{"text":" ","type":"text"},{"type":"text","text":"This may still be the right solution, but the side-effects should be carefully"},{"type":"text","text":" "},{"type":"text","text":"considered first, even if only a small number of types are involved."}]},{"text":"Preconcurrency Conformance","anchor":"Preconcurrency-Conformance","type":"heading","level":4},{"inlineContent":[{"type":"text","text":"Swift has a number of mechanisms to help you adopt concurrency incrementally"},{"text":" ","type":"text"},{"type":"text","text":"and interoperate with code that has not yet begun using concurrency at all."},{"text":" ","type":"text"},{"type":"text","text":"These tools can be helpful both for code you do not own, as well as code you"},{"type":"text","text":" "},{"text":"do own, but cannot easily change.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Annotating a protocol conformance with ","type":"text"},{"code":"@preconcurrency","type":"codeVoice"},{"type":"text","text":" makes it possible to"},{"text":" ","type":"text"},{"type":"text","text":"suppress errors about any isolation mismatches."}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class WindowStyler: @preconcurrency Styler {","    func applyStyle() {","        \/\/ implementation body","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"This inserts runtime checks to ensure that that static isolation","type":"text"},{"text":" ","type":"text"},{"text":"of the conforming class is always enforced.","type":"text"}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"To learn more about incremental adoption and dynamic isolation,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"see "},{"type":"reference","identifier":"incrementaladoption#Dynamic-Isolation","isActive":true}]}],"name":"Note"},{"anchor":"Isolated-Conforming-Type","level":3,"text":"Isolated Conforming Type","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So far, the solutions presented assume that the cause of the isolation"},{"type":"text","text":" "},{"type":"text","text":"mismatches are ultimately rooted in the protocol definition."},{"type":"text","text":" "},{"type":"text","text":"But, it could be that the protocol’s static isolation is appropriate,"},{"type":"text","text":" "},{"text":"and the issue instead is only caused by the conforming type.","type":"text"}]},{"anchor":"Non-Isolated","text":"Non-Isolated","type":"heading","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"Even a completely non-isolated function can still be useful."}]},{"code":["@MainActor","class WindowStyler: Styler {","    nonisolated func applyStyle() {","        \/\/ perhaps this implementation doesn't involve","        \/\/ other MainActor-isolated state","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The downside to such an implementation is that isolated state and"},{"type":"text","text":" "},{"text":"functions become unavailable.","type":"text"},{"type":"text","text":" "},{"text":"This is definitely a major constraint, but could still be","type":"text"},{"text":" ","type":"text"},{"text":"appropriate, especially if it is used exclusively as a source of","type":"text"},{"type":"text","text":" "},{"text":"instance-independent configuration.","type":"text"}]},{"type":"heading","anchor":"Conformance-by-Proxy","text":"Conformance by Proxy","level":4},{"type":"paragraph","inlineContent":[{"text":"It could be possible to use an intermediate type to help address static","type":"text"},{"type":"text","text":" "},{"type":"text","text":"isolation differences."},{"type":"text","text":" "},{"type":"text","text":"This can be particularly effective if the protocol requires inheritance by its"},{"text":" ","type":"text"},{"type":"text","text":"conforming types."}]},{"code":["class UIStyler {","}","","protocol Styler: UIStyler {","    func applyStyle()","}","","\/\/ actors cannot have class-based inheritance","actor WindowStyler: Styler {","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Introducing a new type to conform indirectly can make this situation work.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, this solution will require some structural changes to "},{"type":"codeVoice","code":"WindowStyler"},{"type":"text","text":" "},{"type":"text","text":"that could spill out code that depends on it as well."}],"type":"paragraph"},{"syntax":"swift","code":["struct CustomWindowStyle: Styler {","    func applyStyle() {","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, a new type has been created that can satisfy the needed inheritance."},{"text":" ","type":"text"},{"type":"text","text":"Incorporating will be easiest if the conformance is only used internally by"},{"type":"text","text":" "},{"code":"WindowStyler","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","text":"Crossing Isolation Boundaries","level":2,"anchor":"Crossing-Isolation-Boundaries"},{"type":"paragraph","inlineContent":[{"text":"Any value that needs to move from one isolation domain to another","type":"text"},{"type":"text","text":" "},{"text":"must either be ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" or must preserve mutually exclusive access."},{"type":"text","text":" "},{"type":"text","text":"Using values with types that do not satisfy these requirements in contexts"},{"text":" ","type":"text"},{"type":"text","text":"that require them is a very common problem."},{"type":"text","text":" "},{"text":"And because libraries and frameworks may be updated to use Swift’s","type":"text"},{"text":" ","type":"text"},{"text":"concurrency features, these issues can come up even when your code hasn’t","type":"text"},{"type":"text","text":" "},{"text":"changed.","type":"text"}]},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"These code examples are available in package form."},{"type":"text","text":" "},{"text":"Try them out yourself in ","type":"text"},{"identifier":"https:\/\/github.com\/apple\/swift-migration-guide\/blob\/main\/Sources\/Examples\/Boundaries.swift","isActive":true,"type":"reference"},{"type":"text","text":"."}]}],"name":"Experiment","style":"experiment"},{"level":3,"type":"heading","text":"Implicitly-Sendable Types","anchor":"Implicitly-Sendable-Types"},{"inlineContent":[{"type":"text","text":"Many value types consist entirely of "},{"type":"codeVoice","code":"Sendable"},{"text":" properties.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The compiler will treat types like this as implicitly "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", but "},{"type":"emphasis","inlineContent":[{"type":"text","text":"only"}]},{"type":"text","text":" "},{"type":"text","text":"when they are non-public."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public struct ColorComponents {","    public let red: Float","    public let green: Float","    public let blue: Float","}","","@MainActor","func applyBackground(_ color: ColorComponents) {","}","","func updateStyle(backgroundColor: ColorComponents) async {","    await applyBackground(backgroundColor)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" conformance is part of a type’s public API contract,"},{"type":"text","text":" "},{"type":"text","text":"and that is up to you to define."},{"type":"text","text":" "},{"type":"text","text":"Because "},{"type":"codeVoice","code":"ColorComponents"},{"text":" is marked ","type":"text"},{"type":"codeVoice","code":"public"},{"text":" it will not have an implicit","type":"text"},{"type":"text","text":" "},{"type":"text","text":"conformance to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This will result in the following error:"}]},{"type":"codeListing","syntax":null,"code":[" 6 | "," 7 | func updateStyle(backgroundColor: ColorComponents) async {"," 8 |     await applyBackground(backgroundColor)","   |           |- error: sending 'backgroundColor' risks causing data races","   |           `- note: sending task-isolated 'backgroundColor' to main actor-isolated global function 'applyBackground' risks causing data races between main actor-isolated and task-isolated uses"," 9 | }","10 | "]},{"inlineContent":[{"type":"text","text":"A very straightforward solution is just to make the type’s "},{"type":"codeVoice","code":"Sendable"},{"text":" ","type":"text"},{"text":"conformance explicit.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public struct ColorComponents: Sendable {","    \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"Even when trivial, adding a ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" conformance should always be"},{"type":"text","text":" "},{"type":"text","text":"done with care."},{"type":"text","text":" "},{"text":"Remember that ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" is a guarantee of thread-safety, and part of a"},{"type":"text","text":" "},{"type":"text","text":"type’s API contract."},{"type":"text","text":" "},{"text":"Removing the conformance is an API-breaking change.","type":"text"}]},{"level":3,"text":"Preconcurrency Import","anchor":"Preconcurrency-Import","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Even if the type in another module is actually ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":", it is not always","type":"text"},{"type":"text","text":" "},{"text":"possible to modify its definition.","type":"text"},{"type":"text","text":" "},{"text":"In this case, you can use a ","type":"text"},{"code":"@preconcurrency import","type":"codeVoice"},{"text":" to suppress errors until","type":"text"},{"type":"text","text":" "},{"text":"the library is updated.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ ColorComponents defined here","@preconcurrency import UnmigratedModule","","func updateStyle(backgroundColor: ColorComponents) async {","    \/\/ crossing an isolation domain here","    await applyBackground(backgroundColor)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"With the addition of this "},{"type":"codeVoice","code":"@preconcurrency import"},{"text":",","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"ColorComponents"},{"type":"text","text":" remains non-"},{"type":"codeVoice","code":"Sendable"},{"text":".","type":"text"},{"type":"text","text":" "},{"type":"text","text":"However, the compiler’s behavior will be altered."},{"text":" ","type":"text"},{"text":"When using the Swift 6 language mode, the produced here will be downgraded","type":"text"},{"type":"text","text":" "},{"text":"to a warning.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The Swift 5 language mode will produce no diagnostics at all."}]},{"type":"heading","level":3,"text":"Latent Isolation","anchor":"Latent-Isolation"},{"type":"paragraph","inlineContent":[{"text":"Sometimes the ","type":"text"},{"inlineContent":[{"type":"text","text":"apparent"}],"type":"emphasis"},{"text":" need for a ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" type can actually be the","type":"text"},{"text":" ","type":"text"},{"text":"symptom of a more fundamental isolation problem.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The only reason a type needs to be "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" is to cross isolation boundaries."},{"type":"text","text":" "},{"text":"If you can avoid crossing boundaries altogether, the result can","type":"text"},{"type":"text","text":" "},{"text":"often be both simpler and a better reflection of the true nature of your","type":"text"},{"type":"text","text":" "},{"type":"text","text":"system."}]},{"code":["@MainActor","func applyBackground(_ color: ColorComponents) {","}","","func updateStyle(backgroundColor: ColorComponents) async {","    await applyBackground(backgroundColor)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"updateStyle(backgroundColor:)"},{"type":"text","text":" function is non-isolated."},{"text":" ","type":"text"},{"text":"This means that its non-","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" parameter is also non-isolated."},{"text":" ","type":"text"},{"type":"text","text":"But, it is immediately crossing from this non-isolated domain to the"},{"type":"text","text":" "},{"type":"codeVoice","code":"MainActor"},{"type":"text","text":" when "},{"code":"applyBackground(_:)","type":"codeVoice"},{"type":"text","text":" is called."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Since ","type":"text"},{"type":"codeVoice","code":"updateStyle(backgroundColor:)"},{"type":"text","text":" is working directly with"},{"text":" ","type":"text"},{"type":"codeVoice","code":"MainActor"},{"type":"text","text":"-isolated functions and non-"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" types,"},{"text":" ","type":"text"},{"text":"just applying ","type":"text"},{"code":"MainActor","type":"codeVoice"},{"type":"text","text":" isolation may be more appropriate."}]},{"syntax":"swift","code":["@MainActor","func updateStyle(backgroundColor: ColorComponents) async {","    applyBackground(backgroundColor)","}"],"type":"codeListing"},{"inlineContent":[{"text":"Now, there is no longer an isolation boundary for the non-","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" type to","type":"text"},{"type":"text","text":" "},{"text":"cross.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"And in this case, not only does this resolve the problem, it also"},{"type":"text","text":" "},{"type":"text","text":"removes the need for an asynchronous call."},{"text":" ","type":"text"},{"type":"text","text":"Fixing latent isolation issues can also potentially make further API"},{"type":"text","text":" "},{"type":"text","text":"simplification possible."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Lack of ","type":"text"},{"type":"codeVoice","code":"MainActor"},{"type":"text","text":" isolation like this is, by far, the most common form of"},{"type":"text","text":" "},{"text":"latent isolation.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It is also very common for developers to hesitate to use this as a solution."},{"text":" ","type":"text"},{"type":"text","text":"It is completely normal for programs with a user interface to have a large"},{"type":"text","text":" "},{"text":"set of ","type":"text"},{"type":"codeVoice","code":"MainActor"},{"type":"text","text":"-isolated state."},{"type":"text","text":" "},{"type":"text","text":"Concerns around long-running "},{"type":"emphasis","inlineContent":[{"type":"text","text":"synchronous"}]},{"text":" work can often be addressed with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"just a handful of targeted "},{"code":"nonisolated","type":"codeVoice"},{"text":" functions.","type":"text"}]},{"level":3,"anchor":"Computed-Value","text":"Computed Value","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Instead of trying to pass a non-","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" type across a boundary, it may be","type":"text"},{"type":"text","text":" "},{"text":"possible to use a ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" function that creates the needed values.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func updateStyle(backgroundColorProvider: @Sendable () -> ColorComponents) async {","    await applyBackground(using: backgroundColorProvider)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here, it does not matter than "},{"type":"codeVoice","code":"ColorComponents"},{"type":"text","text":" is not "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"By using "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" function that can compute the value, the lack of"},{"text":" ","type":"text"},{"type":"text","text":"sendability is side-stepped entirely."}]},{"anchor":"Sendable-Conformance","type":"heading","text":"Sendable Conformance","level":3},{"inlineContent":[{"text":"When encountering problems related to crossing isolation domains, a very","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"natural reaction is to just try to add a conformance to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"You can make a type "},{"code":"Sendable","type":"codeVoice"},{"text":" in four ways.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Global Isolation","anchor":"Global-Isolation","level":4},{"inlineContent":[{"type":"text","text":"Adding global isolation to any type will make it implicitly "},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@MainActor","public struct ColorComponents {","    \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"By isolating this type to the "},{"type":"codeVoice","code":"MainActor"},{"text":", any accesses from other isolation domains","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"must be done asynchronously."},{"type":"text","text":" "},{"text":"This makes it possible to safely pass instances around across domains.","type":"text"}]},{"text":"Actors","anchor":"Actors","type":"heading","level":4},{"inlineContent":[{"type":"text","text":"Actors have an implicit "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" conformance because their properties are"},{"text":" ","type":"text"},{"type":"text","text":"protected by actor isolation."}],"type":"paragraph"},{"code":["actor Style {","    private var background: ColorComponents","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In addition to gaining a ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" conformance, actors have their own","type":"text"},{"type":"text","text":" "},{"type":"text","text":"isolation domain."},{"text":" ","type":"text"},{"text":"This allows them to freely work with other non-","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" types internally.","type":"text"},{"text":" ","type":"text"},{"text":"This can be a major advantage, but does come with trade-offs.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because an actor’s isolated methods all must be asynchronous,"},{"type":"text","text":" "},{"type":"text","text":"sites that access the type may now require an async context."},{"type":"text","text":" "},{"type":"text","text":"This alone is a reason to make such a change with care."},{"text":" ","type":"text"},{"type":"text","text":"But further, data that is passed into or out of the actor may now itself"},{"type":"text","text":" "},{"text":"need to cross the new isolation boundary.","type":"text"},{"text":" ","type":"text"},{"text":"This can end up resulting in the need for yet more ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" types."}]},{"text":"Manual Synchronization","anchor":"Manual-Synchronization","level":4,"type":"heading"},{"inlineContent":[{"text":"If you have a type that is already doing manual synchronization, you can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"express this to the compiler by marking your "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" conformance as"},{"type":"text","text":" "},{"code":"unchecked","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Style: @unchecked Sendable {","    private var background: ColorComponents","    private let queue: DispatchQueue","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You should not feel compelled to remove use of queues, locks, or other"},{"text":" ","type":"text"},{"type":"text","text":"forms of manual synchronization to integrate with Swift’s concurrency system."},{"type":"text","text":" "},{"type":"text","text":"However, most types are not inherently thread-safe."},{"type":"text","text":" "},{"type":"text","text":"As a general rule, if a type isn’t already thread-safe, attempting to make"},{"text":" ","type":"text"},{"type":"text","text":"it "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" should not be your first approach."},{"type":"text","text":" "},{"text":"It is often much easier to try other techniques first, falling back to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"manual synchronization only when truly necessary."}]},{"level":4,"type":"heading","text":"Sendable Reference Types","anchor":"Sendable-Reference-Types"},{"inlineContent":[{"type":"text","text":"It is possible for reference types to be validated as "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" without"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"type":"codeVoice","code":"unchecked"},{"type":"text","text":" qualifier."},{"text":" ","type":"text"},{"type":"text","text":"But, this can only be done under very narrow circumstances."}],"type":"paragraph"},{"inlineContent":[{"text":"To allow a checked ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" conformance a class:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Must be "},{"code":"final","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Cannot inherit from another class other than "},{"code":"NSObject","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"text":"Cannot have any non-isolated mutable properties","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","type":"codeListing","code":["public struct ColorComponents: Sendable {","    \/\/ ...","}","","final class Style: Sendable {","    private let background: ColorComponents","}"]},{"inlineContent":[{"type":"text","text":"Sometimes, this is a sign of a struct in disguise."},{"type":"text","text":" "},{"type":"text","text":"But this can still be a useful technique when reference semantics need to be"},{"text":" ","type":"text"},{"type":"text","text":"preserved, or for types that are part of a mixed Swift\/Objective-C code base."}],"type":"paragraph"},{"type":"heading","level":4,"anchor":"Using-Composition","text":"Using Composition"},{"inlineContent":[{"text":"You do not need to select one single technique for making a reference type","type":"text"},{"type":"text","text":" "},{"code":"Sendable.","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"One type can use many techniques internally."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["final class Style: Sendable {","    private nonisolated(unsafe) var background: ColorComponents","    private let queue: DispatchQueue","","    @MainActor","    private var foreground: ColorComponents","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"background"},{"text":" property is protected by manual synchronization,","type":"text"},{"type":"text","text":" "},{"text":"while the ","type":"text"},{"code":"foreground","type":"codeVoice"},{"type":"text","text":" property uses actor isolation."},{"text":" ","type":"text"},{"type":"text","text":"Combining these two techniques results in a type that better describes its"},{"type":"text","text":" "},{"type":"text","text":"internal semantics."},{"type":"text","text":" "},{"type":"text","text":"And by doing this, the type can now continue to take advantage of the"},{"type":"text","text":" "},{"text":"compiler’s automated isolation checking.","type":"text"}]},{"type":"heading","anchor":"Non-Isolated-Initialization","text":"Non-Isolated Initialization","level":3},{"type":"paragraph","inlineContent":[{"text":"Actor-isolated types can present a problem when they have to be initialized in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a non-isolated context."},{"type":"text","text":" "},{"type":"text","text":"This occurs frequently when the type is used in a default value expression or"},{"type":"text","text":" "},{"type":"text","text":"as a property initializer."}]},{"style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"These problems could also be a symptom of"},{"text":" ","type":"text"},{"identifier":"#Latent-Isolation","type":"reference","isActive":true},{"type":"text","text":" or an"},{"text":" ","type":"text"},{"type":"reference","identifier":"#Under-Specified-Protocol","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"Here the non-isolated ","type":"text"},{"code":"Stylers","type":"codeVoice"},{"type":"text","text":" type is making a call to a"},{"type":"text","text":" "},{"type":"codeVoice","code":"MainActor"},{"type":"text","text":"-isolated initializer."}]},{"code":["@MainActor","class WindowStyler {","    init() {","    }","}","","struct Stylers {","    static let window = WindowStyler()","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This code results in the following error:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":[" 7 | "," 8 | struct Stylers {"," 9 |     static let window = WindowStyler()","   |                `- error: main actor-isolated default value in a nonisolated context","10 | }","11 | "],"type":"codeListing"},{"inlineContent":[{"text":"Globally-isolated types sometimes don’t actually need to reference any global","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actor state in their initializers."},{"text":" ","type":"text"},{"text":"By making the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" method ","type":"text"},{"type":"codeVoice","code":"nonisolated"},{"text":", it is free to be called from any","type":"text"},{"text":" ","type":"text"},{"text":"isolation domain.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This remains safe as the compiler still guarantees that any state that "},{"inlineContent":[{"text":"is","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"text":"isolated will only be accessible from the ","type":"text"},{"code":"MainActor","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"code":["@MainActor","class WindowStyler {","    private var viewStyler = ViewStyler()","    private var primaryStyleName: String","","    nonisolated init(name: String) {","        self.primaryStyleName = name","        \/\/ type is fully-initialized here","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"All "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" properties can still be safely accessed in this "},{"code":"init","type":"codeVoice"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"text":"And while any non-","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" properties cannot,"},{"type":"text","text":" "},{"text":"they can still be initialized by using default expressions.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"Non-Isolated-Deinitialization","level":3,"text":"Non-Isolated Deinitialization"},{"type":"paragraph","inlineContent":[{"text":"Even if a type has actor isolation, deinitializers are ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"always"}]},{"text":" non-isolated.","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["actor BackgroundStyler {","    \/\/ another actor-isolated type","    private let store = StyleStore()","","    deinit {","        \/\/ this is non-isolated","        store.stopNotifications()","    }","}"]},{"inlineContent":[{"type":"text","text":"This code produces the error:"}],"type":"paragraph"},{"type":"codeListing","code":["error: call to actor-isolated instance method 'stopNotifications()' in a synchronous nonisolated context"," 5 |     deinit {"," 6 |         \/\/ this is non-isolated"," 7 |         store.stopNotifications()","   |               `- error: call to actor-isolated instance method 'stopNotifications()' in a synchronous nonisolated context"," 8 |     }"," 9 | }"],"syntax":null},{"inlineContent":[{"text":"While this might feel surprising, given that this type is an actor,","type":"text"},{"text":" ","type":"text"},{"text":"this is not a new constraint.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The thread that executes a deinitializer has never been guaranteed and"},{"text":" ","type":"text"},{"type":"text","text":"Swift’s data isolation is now just surfacing that fact."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Often, the work being done within the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" does not need to be synchronous."},{"text":" ","type":"text"},{"type":"text","text":"A solution is to use an unstructured "},{"code":"Task","type":"codeVoice"},{"type":"text","text":" to first capture and"},{"type":"text","text":" "},{"type":"text","text":"then operate on the isolated values."},{"type":"text","text":" "},{"text":"When using this technique,","type":"text"},{"type":"text","text":" "},{"text":"it is ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"critical","type":"text"}]},{"text":" to ensure you do not capture ","type":"text"},{"code":"self","type":"codeVoice"},{"type":"text","text":", even implicitly."}]},{"syntax":"swift","type":"codeListing","code":["actor BackgroundStyler {","    \/\/ another actor-isolated type","    private let store = StyleStore()","","    deinit {","        \/\/ no actor isolation here, so none will be inherited by the task","        Task { [store] in","            await store.stopNotifications()","        }","    }","}"]},{"style":"important","type":"aside","content":[{"inlineContent":[{"text":"","type":"text"},{"type":"strong","inlineContent":[{"text":"Never","type":"text"}]},{"text":" extend the life-time of ","type":"text"},{"type":"codeVoice","code":"self"},{"type":"text","text":" from within"},{"type":"text","text":" "},{"code":"deinit","type":"codeVoice"},{"text":". Doing so will crash at runtime.","type":"text"}],"type":"paragraph"}],"name":"Important"}]}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"incrementaladoption#Dynamic-Isolation":{"identifier":"incrementaladoption#Dynamic-Isolation","titleInlineContent":[{"type":"text","text":"Dynamic Isolation"}],"type":"link","url":"incrementaladoption#Dynamic-Isolation","title":"Dynamic Isolation"},"doc://org.swift.migration.6/documentation/MigrationGuide":{"role":"collection","abstract":[],"type":"topic","title":"Migrating to Swift 6","identifier":"doc:\/\/org.swift.migration.6\/documentation\/MigrationGuide","kind":"article","url":"\/documentation\/migrationguide"},"#Latent-Isolation":{"type":"link","identifier":"#Latent-Isolation","titleInlineContent":[{"type":"text","text":"latent isolation"}],"title":"latent isolation","url":"#Latent-Isolation"},"https://github.com/apple/swift-migration-guide/blob/main/Sources/Examples/Globals.swift":{"identifier":"https:\/\/github.com\/apple\/swift-migration-guide\/blob\/main\/Sources\/Examples\/Globals.swift","titleInlineContent":[{"type":"text","text":"Globals.swift"}],"type":"link","url":"https:\/\/github.com\/apple\/swift-migration-guide\/blob\/main\/Sources\/Examples\/Globals.swift","title":"Globals.swift"},"#Under-Specified-Protocol":{"type":"link","identifier":"#Under-Specified-Protocol","titleInlineContent":[{"type":"text","text":"under-specified protocol"}],"title":"under-specified protocol","url":"#Under-Specified-Protocol"},"https://github.com/apple/swift-migration-guide/blob/main/Sources/Examples/ConformanceMismatches.swift":{"identifier":"https:\/\/github.com\/apple\/swift-migration-guide\/blob\/main\/Sources\/Examples\/ConformanceMismatches.swift","titleInlineContent":[{"type":"text","text":"ConformanceMismatches.swift"}],"type":"link","url":"https:\/\/github.com\/apple\/swift-migration-guide\/blob\/main\/Sources\/Examples\/ConformanceMismatches.swift","title":"ConformanceMismatches.swift"},"https://github.com/apple/swift-migration-guide/blob/main/Sources/Examples/Boundaries.swift":{"type":"link","identifier":"https:\/\/github.com\/apple\/swift-migration-guide\/blob\/main\/Sources\/Examples\/Boundaries.swift","titleInlineContent":[{"type":"text","text":"Boundaries.swift"}],"title":"Boundaries.swift","url":"https:\/\/github.com\/apple\/swift-migration-guide\/blob\/main\/Sources\/Examples\/Boundaries.swift"}}}