{"sections":[],"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"Swift’s concurrency model with a strong focus on async\/await, actors and tasks,","type":"text"},{"type":"text","text":" "},{"text":"means that some patterns from other libraries or concurrency runtimes don’t","type":"text"},{"type":"text","text":" "},{"type":"text","text":"translate directly into this new model. In this section, we’ll explore common"},{"text":" ","type":"text"},{"type":"text","text":"patterns and differences in runtime behavior to be aware of, and how to address"},{"type":"text","text":" "},{"type":"text","text":"them while you migrate your code to Swift concurrency."}],"type":"paragraph"},{"anchor":"Limiting-concurrency-using-Task-Groups","level":2,"type":"heading","text":"Limiting concurrency using Task Groups"},{"inlineContent":[{"text":"Sometimes you may find yourself with a large list of work to be processed.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While it is possible to just enqueue “all” those work items to a task group like this:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Potentially wasteful -- perhaps this creates thousands of tasks concurrently (?!)","","let lotsOfWork: [Work] = ...","await withTaskGroup(of: Something.self) { group in","  for work in lotsOfWork {","    \/\/ If this is thousands of items, we may end up creating a lot of tasks here.","    group.addTask {","      await work.work()","    }","  }","","  for await result in group {","    process(result) \/\/ process the result somehow, depends on your needs","  }","}"]},{"inlineContent":[{"type":"text","text":"If you suspect you may be dealing with hundreds or thousands of items, it may be wasteful to enqueue them all immediately."},{"text":" ","type":"text"},{"type":"text","text":"Creating a task (in "},{"code":"addTask","type":"codeVoice"},{"type":"text","text":") needs to allocate some memory for the task in order to suspend and execute."},{"type":"text","text":" "},{"type":"text","text":"This amount of memory isn’t too large, it can become significant if creating thousands of tasks which don’t get to"},{"text":" ","type":"text"},{"text":"execute immediately but are just waiting until the executor gets to run them.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"When faced with such a situation, it may be beneficial to manually throttle the number of concurrently added tasks to the task group, as follows:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let lotsOfWork: [Work] = ... ","let maxConcurrentWorkTasks = min(lotsOfWork.count, 10)","assert(maxConcurrentWorkTasks > 0)","","await withTaskGroup(of: Something.self) { group in","    var submittedWork = 0","    for _ in 0..<maxConcurrentWorkTasks {","        group.addTask { \/\/ or 'addTaskUnlessCancelled'","            await lotsOfWork[submittedWork].work() ","        }","        submittedWork += 1","    }","    ","    for await result in group {","        process(result) \/\/ process the result somehow, depends on your needs","    ","        \/\/ Every time we get a result back, check if there's more work we should submit and do so","        if submittedWork < lotsOfWork.count, ","           let remainingWorkItem = lotsOfWork[submittedWork] {","            group.addTask { \/\/ or 'addTaskUnlessCancelled'","                await remainingWorkItem.work() ","            }  ","            submittedWork += 1","        }","    }","}"]}]}],"metadata":{"title":"Runtime Behavior"},"abstract":[{"text":"Learn how Swift concurrency runtime semantics differ from other runtimes you may","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be familiar with, and familiarize yourself with common patterns to achieve"},{"text":" ","type":"text"},{"type":"text","text":"similar end results in terms of execution semantics."}],"schemaVersion":{"major":0,"patch":0,"minor":3},"kind":"article","hierarchy":{"paths":[["doc:\/\/org.swift.migration.6\/documentation\/MigrationGuide"]]},"identifier":{"url":"doc:\/\/org.swift.migration.6\/documentation\/Swift-6-Concurrency-Migration-Guide\/RuntimeBehavior","interfaceLanguage":"swift"},"references":{"doc://org.swift.migration.6/documentation/MigrationGuide":{"title":"Migrating to Swift 6","identifier":"doc:\/\/org.swift.migration.6\/documentation\/MigrationGuide","kind":"article","type":"topic","url":"\/documentation\/migrationguide","abstract":[],"role":"collection"}}}