{"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/org.swift.migration.6\/documentation\/Swift-6-Concurrency-Migration-Guide\/DataRaceSafety"},"primaryContentSections":[{"kind":"content","content":[{"inlineContent":[{"text":"Traditionally, mutable state had to be manually protected via careful runtime","type":"text"},{"type":"text","text":" "},{"type":"text","text":"synchronization."},{"text":" ","type":"text"},{"text":"Using tools such as locks and queues, the prevention of data races was","type":"text"},{"text":" ","type":"text"},{"text":"entirely up to the programmer. This is notoriously difficult","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"not just to do correctly, but also to keep correct over time."},{"text":" ","type":"text"},{"text":"Even determining the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"need","type":"text"}]},{"type":"text","text":" for synchronization may be challenging."},{"text":" ","type":"text"},{"type":"text","text":"Worst of all, unsafe code does not guarantee failure at runtime."},{"text":" ","type":"text"},{"type":"text","text":"This code can often seem to work, possibly because highly unusual conditions"},{"type":"text","text":" "},{"type":"text","text":"are required to exhibit the incorrect and unpredictable behavior characteristic"},{"type":"text","text":" "},{"text":"of a data race.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"More formally, a data race occurs when one thread accesses memory while the","type":"text"},{"type":"text","text":" "},{"text":"same memory is being mutated by another thread.","type":"text"},{"type":"text","text":" "},{"text":"The Swift 6 language mode eliminates these problems by preventing data races","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"at compile time."}],"type":"paragraph"},{"type":"aside","style":"important","content":[{"inlineContent":[{"type":"text","text":"You may have encountered constructs like "},{"code":"async","type":"codeVoice"},{"text":"\/","type":"text"},{"code":"await","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"and actors in other languages. Pay extra attention, as similarities to"},{"type":"text","text":" "},{"text":"these concepts in Swift may only be superficial.","type":"text"}],"type":"paragraph"}],"name":"Important"},{"anchor":"Data-Isolation","type":"heading","level":2,"text":"Data Isolation"},{"inlineContent":[{"text":"Swift’s concurrency system allows the compiler to understand and verify the","type":"text"},{"text":" ","type":"text"},{"text":"safety of all mutable state.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"It does this with a mechanism called "},{"inlineContent":[{"text":"data isolation","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"text":" ","type":"text"},{"text":"Data isolation guarantees mutually exclusive","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"access to mutable state. It is a form of synchronization,"},{"type":"text","text":" "},{"text":"conceptually similar to a lock.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"But unlike a lock, the protection data isolation provides happens at"},{"text":" ","type":"text"},{"type":"text","text":"compile-time."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"A Swift programmer interacts with data isolation in two ways:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"statically and dynamically."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The term "},{"type":"emphasis","inlineContent":[{"text":"static","type":"text"}]},{"type":"text","text":" is used to describe program elements that are unaffected by"},{"text":" ","type":"text"},{"type":"text","text":"runtime state. These elements, such as a function definition,"},{"text":" ","type":"text"},{"type":"text","text":"are made up of keywords and annotations. Swift’s concurrency system is"},{"type":"text","text":" "},{"type":"text","text":"an extension of its type system. When you declare functions and types,"},{"type":"text","text":" "},{"type":"text","text":"you are doing so statically. Isolation can be a part of these static"},{"type":"text","text":" "},{"type":"text","text":"declarations."}]},{"type":"paragraph","inlineContent":[{"text":"There are cases, however, where the type system alone cannot sufficiently","type":"text"},{"type":"text","text":" "},{"type":"text","text":"describe a system’s behavior. An example could be an Objective-C type"},{"type":"text","text":" "},{"type":"text","text":"that has been exposed to Swift. This declaration, made outside of Swift code,"},{"type":"text","text":" "},{"type":"text","text":"may not provide enough information to the compiler to ensure safe usage. To"},{"text":" ","type":"text"},{"text":"accommodate these situations, there are additional features that allow you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to express isolation requirements dynamically."}]},{"type":"paragraph","inlineContent":[{"text":"Data isolation, be it static or dynamic, allows the","type":"text"},{"type":"text","text":" "},{"text":"compiler to guarantee Swift code you write is free of data races.","type":"text"}]},{"content":[{"inlineContent":[{"text":"For more information about using dynamic isolation,","type":"text"},{"type":"text","text":" "},{"text":"see ","type":"text"},{"type":"reference","identifier":"doc:\/\/org.swift.migration.6\/documentation\/Swift-6-Concurrency-Migration-Guide\/IncrementalAdoption#Dynamic-Isolation","isActive":true}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"level":3,"type":"heading","text":"Isolation Domains","anchor":"Isolation-Domains"},{"inlineContent":[{"type":"text","text":"Data isolation is the "},{"inlineContent":[{"type":"text","text":"mechanism"}],"type":"emphasis"},{"text":" used to protect shared mutable state.","type":"text"},{"text":" ","type":"text"},{"text":"But, it is often useful to talk about an independent unit of isolation.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"This is known as an "},{"inlineContent":[{"text":"isolation domain","type":"text"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"How much state a particular domain is responsible for"},{"text":" ","type":"text"},{"text":"protecting can vary widely. An isolation domain might protect a single variable,","type":"text"},{"type":"text","text":" "},{"text":"or an entire subsystem, like a complete user interface.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The critical feature of an isolation domain is the safety it provides.","type":"text"},{"type":"text","text":" "},{"text":"Mutable state can only be accessed from one isolation domain at a time.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"You can pass mutable state from one isolation domain to another, but you can"},{"text":" ","type":"text"},{"type":"text","text":"never access that state concurrently from a different domain."},{"text":" ","type":"text"},{"text":"This guarantee is validated by the compiler.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Even if you have not explicitly defined it yourself,","type":"text"},{"text":" ","type":"text"},{"inlineContent":[{"type":"text","text":"all"}],"type":"emphasis"},{"type":"text","text":" function and variable declarations have a well-defined static"},{"text":" ","type":"text"},{"type":"text","text":"isolation domain."},{"text":" ","type":"text"},{"type":"text","text":"These domains will always fall into one of three categories:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Non-isolated"}]}]},{"content":[{"inlineContent":[{"text":"Isolated to an actor value","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Isolated to a global actor","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Non-isolated","type":"heading","level":3,"text":"Non-isolated"},{"inlineContent":[{"text":"Functions and variables do not have to be a part of an explicit isolation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"domain."},{"type":"text","text":" "},{"text":"In fact, a lack of isolation is the default, called ","type":"text"},{"inlineContent":[{"type":"text","text":"non-isolated"}],"type":"emphasis"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"This absence of isolation behaves just like a domain all to itself."},{"type":"text","text":" "},{"type":"text","text":"Because all the data isolation rules apply,"},{"text":" ","type":"text"},{"text":"there is no way for non-isolated code to mutate state protected in another","type":"text"},{"type":"text","text":" "},{"type":"text","text":"domain."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func sailTheSea() {","}"]},{"type":"paragraph","inlineContent":[{"text":"This top-level function has no static isolation, making it non-isolated.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"It can safely call other non-isolated functions, and access non-isolated"},{"type":"text","text":" "},{"type":"text","text":"variables, but it cannot access anything from another isolation domain."}]},{"type":"codeListing","syntax":"swift","code":["class Chicken {","    let name: String","    var currentHunger: HungerLevel","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is an example of a non-isolated type."},{"type":"text","text":" "},{"type":"text","text":"Inheritance can play a role in static isolation."},{"type":"text","text":" "},{"type":"text","text":"But, this simple class, with no superclass or protocol conformances,"},{"type":"text","text":" "},{"type":"text","text":"also uses the default isolation."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Data isolation guarantees that non-isolated entities cannot access the mutable"},{"type":"text","text":" "},{"text":"state from other domains.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"As a result of this, non-isolated functions and variables are always safe to"},{"type":"text","text":" "},{"type":"text","text":"access from any other domain."}]},{"text":"Actors","level":3,"type":"heading","anchor":"Actors"},{"type":"paragraph","inlineContent":[{"text":"Actors give the programmer a way to define an isolation domain,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"along with methods that operate within that domain."},{"text":" ","type":"text"},{"text":"All stored instance properties of an actor are isolated to the enclosing","type":"text"},{"type":"text","text":" "},{"text":"actor instance.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["actor Island {","    var flock: [Chicken]","    var food: [Pineapple]","","    func addToFlock() {","        flock.append(Chicken())","    }","}"]},{"inlineContent":[{"type":"text","text":"Here, every "},{"code":"Island","type":"codeVoice"},{"text":" instance will define a new domain,","type":"text"},{"text":" ","type":"text"},{"text":"which will be used to protect access to its properties.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The method "},{"type":"codeVoice","code":"Island.addToFlock"},{"type":"text","text":" is said to be isolated to "},{"code":"self","type":"codeVoice"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"The body of a method has access to all data that shares its isolation domain,"},{"type":"text","text":" "},{"type":"text","text":"making the "},{"type":"codeVoice","code":"flock"},{"text":" property synchronously accessible.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Actor isolation can be selectively disabled.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This can be useful any time you want to keep code organized within an"},{"type":"text","text":" "},{"type":"text","text":"isolated type, but opt-out of the isolation requirements that go along with it."},{"type":"text","text":" "},{"type":"text","text":"Non-isolated methods cannot synchronously access any protected state."}],"type":"paragraph"},{"code":["actor Island {","    var flock: [Chicken]","    var food: [Pineapple]","","    nonisolated func canGrow() -> PlantSpecies {","        \/\/ neither flock nor food are accessible here","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The isolation domain of an actor is not limited to its own methods."},{"text":" ","type":"text"},{"type":"text","text":"Functions that accept an isolated parameter can also gain access to"},{"text":" ","type":"text"},{"text":"actor-isolated state without the need for any other form of synchronization.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func addToFlock(of island: isolated Island) {","    island.flock.append(Chicken())","}"]},{"style":"note","name":"Note","type":"aside","content":[{"inlineContent":[{"text":"For an overview of actors, please see the ","type":"text"},{"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency#Actors","isActive":true,"type":"reference"},{"type":"text","text":" section of"},{"type":"text","text":" "},{"text":"The Swift Programming Language.","type":"text"}],"type":"paragraph"}]},{"text":"Global Actors","anchor":"Global-Actors","type":"heading","level":3},{"inlineContent":[{"text":"Global actors share all of the properties of regular actors, but also provide","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a means of statically assigning declarations to their isolation domain."},{"text":" ","type":"text"},{"type":"text","text":"This is done with an annotation matching the actor name."},{"text":" ","type":"text"},{"type":"text","text":"Global actors are particularly useful when groups of types all need to"},{"text":" ","type":"text"},{"type":"text","text":"interoperate as a single pool of shared mutable state."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@MainActor","class ChickenValley {","    var flock: [Chicken]","    var food: [Pineapple]","}"]},{"inlineContent":[{"type":"text","text":"This class is statically-isolated to "},{"code":"MainActor","type":"codeVoice"},{"type":"text","text":". This ensures that all access"},{"type":"text","text":" "},{"type":"text","text":"to its mutable state is done from that isolation domain."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can opt-out of this type of actor isolation as well,"},{"type":"text","text":" "},{"text":"using the ","type":"text"},{"type":"codeVoice","code":"nonisolated"},{"type":"text","text":" keyword."},{"text":" ","type":"text"},{"text":"And just as with actor types,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"doing so will disallow access to any protected state."}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class ChickenValley {","    var flock: [Chicken]","    var food: [Pineapple]","","    nonisolated func canGrow() -> PlantSpecies {","        \/\/ neither flock, food, nor any other MainActor-isolated","        \/\/ state is accessible here","    }","}"]},{"anchor":"Tasks","level":3,"text":"Tasks","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"task"},{"type":"text","text":" is a unit of work that can run concurrently within your program."},{"type":"text","text":" "},{"type":"text","text":"You cannot run concurrent code in Swift outside of a task,"},{"type":"text","text":" "},{"text":"but that doesn’t mean you must always manually start one.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Typically, asynchronous functions do not need to be aware of the"},{"text":" ","type":"text"},{"text":"task running them.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"In fact, tasks can often begin at a much higher level,"},{"type":"text","text":" "},{"type":"text","text":"within an application framework, or even at the root of a program."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tasks may run concurrently with one another,"},{"type":"text","text":" "},{"type":"text","text":"but each individual task only executes one function at a time."},{"type":"text","text":" "},{"type":"text","text":"They run code in order, from beginning to end."}]},{"syntax":"swift","type":"codeListing","code":["Task {","    flock.map(Chicken.produce)","}"]},{"inlineContent":[{"text":"A task always has an isolation domain. They can be isolated to an","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actor instance, a global actor, or could be non-isolated."},{"type":"text","text":" "},{"text":"This isolation can be established manually, but can also be inherited","type":"text"},{"type":"text","text":" "},{"type":"text","text":"automatically based on context."},{"text":" ","type":"text"},{"type":"text","text":"Task isolation, just like all other Swift code, determines what mutable state"},{"type":"text","text":" "},{"text":"they can access.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Tasks can run both synchronous and asynchronous code. But, regardless of the"},{"type":"text","text":" "},{"text":"structure and how many tasks are involved, functions in the same isolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"domain cannot run concurrently with each other."},{"text":" ","type":"text"},{"type":"text","text":"There will only ever be one task running synchronous code for any given"},{"text":" ","type":"text"},{"text":"isolation domain.","type":"text"}]},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"For more information see the "},{"isActive":true,"type":"reference","identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency#Tasks-and-Task-Groups"},{"text":" section of","type":"text"},{"text":" ","type":"text"},{"text":"The Swift Programming Language.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note"},{"level":3,"type":"heading","text":"Isolation Inference and Inheritance","anchor":"Isolation-Inference-and-Inheritance"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are many ways to specify isolation explicitly."},{"type":"text","text":" "},{"text":"But, there are cases where the context of a declaration will establish isolation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"implicitly, via "},{"inlineContent":[{"type":"text","text":"isolation inference"}],"type":"emphasis"},{"text":".","type":"text"}]},{"type":"heading","text":"Classes","level":4,"anchor":"Classes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A subclass will always have the same isolation as its parent."}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","class Animal {","}","","class Chicken: Animal {","}"]},{"type":"paragraph","inlineContent":[{"text":"Because ","type":"text"},{"code":"Chicken","type":"codeVoice"},{"type":"text","text":" inherits from "},{"type":"codeVoice","code":"Animal"},{"type":"text","text":", the static isolation of the "},{"code":"Animal","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"type also implicitly applies."},{"type":"text","text":" "},{"text":"Not only that, it also cannot be changed by a subclass.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"All "},{"type":"codeVoice","code":"Animal"},{"text":" instances have been declared to be ","type":"text"},{"type":"codeVoice","code":"MainActor"},{"type":"text","text":"-isolated, which"},{"type":"text","text":" "},{"text":"means all ","type":"text"},{"type":"codeVoice","code":"Chicken"},{"type":"text","text":" instances must be as well."}]},{"inlineContent":[{"type":"text","text":"The static isolation of a type will also be inferred for its properties and"},{"type":"text","text":" "},{"type":"text","text":"methods by default."}],"type":"paragraph"},{"syntax":"swift","code":["@MainActor","class Animal {","    \/\/ all declarations within this type are also","    \/\/ implicitly MainActor-isolated","    let name: String","","    func eat(food: Pineapple) {","    }","}"],"type":"codeListing"},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"For more information, see the ","type":"text"},{"isActive":true,"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/inheritance","type":"reference"},{"type":"text","text":" section of"},{"type":"text","text":" "},{"text":"The Swift Programming Language.","type":"text"}]}],"name":"Note"},{"type":"heading","text":"Protocols","anchor":"Protocols","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"A protocol conformance can implicitly affect isolation."},{"text":" ","type":"text"},{"text":"However, the protocol’s effect on isolation depends on how the conformance","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is applied."}]},{"type":"codeListing","syntax":"swift","code":["@MainActor","protocol Feedable {","    func eat(food: Pineapple)","}","","\/\/ inferred isolation applies to the entire type","class Chicken: Feedable {","}","","\/\/ inferred isolation only applies within the extension","extension Pirate: Feedable {","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A protocol’s requirements themselves can also be isolated."},{"type":"text","text":" "},{"type":"text","text":"This allows more fine-grained control around how isolation is inferred"},{"text":" ","type":"text"},{"type":"text","text":"for conforming types."}]},{"syntax":"swift","code":["protocol Feedable {","    @MainActor","    func eat(food: Pineapple)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Regardless of how a protocol is defined and conformance added, you cannot alter"},{"type":"text","text":" "},{"type":"text","text":"other mechanisms of static isolation."},{"text":" ","type":"text"},{"text":"If a type is globally-isolated, either explicitly or via inference from a","type":"text"},{"text":" ","type":"text"},{"text":"superclass, a protocol conformance cannot be used to change it.","type":"text"}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see the "},{"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/protocols","type":"reference","isActive":true},{"text":" section of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The Swift Programming Language."}]}]},{"anchor":"Function-Types","type":"heading","level":4,"text":"Function Types"},{"inlineContent":[{"text":"Isolation ","type":"text"},{"inlineContent":[{"text":"inference","type":"text"}],"type":"emphasis"},{"type":"text","text":" allows a type to implicitly define the isolation of"},{"text":" ","type":"text"},{"type":"text","text":"its properties and methods."},{"type":"text","text":" "},{"text":"But these are all examples of ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"declarations","type":"text"}]},{"text":".","type":"text"},{"type":"text","text":" "},{"text":"It is also possible to achieve a similar effect with function values, through","type":"text"},{"text":" ","type":"text"},{"text":"isolation ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"inheritance","type":"text"}]},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure can capture the isolation at its declaration site, instead of the"},{"type":"text","text":" "},{"text":"isolation being statically defined by its type.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This mechanism may sound complex, but in practice it allows very natural"},{"text":" ","type":"text"},{"text":"behaviors.","type":"text"}]},{"code":["@MainActor","func eat(food: Pineapple) {","    \/\/ the static isolation of this function's declaration is","    \/\/ captured by the closure created here","    Task {","        \/\/ allowing the closure's body to inherit MainActor-isolation","        Chicken.prizedHen.eat(food: food)","    }","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The closure’s type here is defined by "},{"type":"codeVoice","code":"Task.init"},{"type":"text","text":"."},{"type":"text","text":" "},{"type":"text","text":"Despite that declaration not being isolated to any actor,"},{"type":"text","text":" "},{"text":"this newly-created task will ","type":"text"},{"inlineContent":[{"type":"text","text":"inherit"}],"type":"emphasis"},{"type":"text","text":" the "},{"type":"codeVoice","code":"MainActor"},{"text":" isolation of its","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"enclosing scope."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is important to note that this form of isolation inheritance must be done"},{"text":" ","type":"text"},{"type":"text","text":"explicitly, using the "},{"code":"isolated(any)","type":"codeVoice"},{"text":" annotation.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Function types offer a number of mechanisms for controlling their"},{"text":" ","type":"text"},{"type":"text","text":"isolation behavior, but by default they behave identically to other types."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"For more information, see the ","type":"text"},{"type":"reference","isActive":true,"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/closures"},{"text":" section of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"The Swift Programming Language."}]}],"style":"note","type":"aside"},{"anchor":"Isolation-Boundaries","type":"heading","text":"Isolation Boundaries","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Isolation domains protect their mutable state. But, useful programs need more"},{"text":" ","type":"text"},{"type":"text","text":"than just protection. They have to communicate and coordinate,"},{"text":" ","type":"text"},{"text":"often by passing data back and forth.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Moving values into or out of an isolation domain is known as crossing an"},{"type":"text","text":" "},{"text":"isolation boundary.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Values are only ever permitted to cross an isolation boundary where there","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is no potential for concurrent access to shared mutable state."},{"type":"text","text":" "},{"text":"Values can cross a boundary directly, via asychronous function calls.","type":"text"},{"text":" ","type":"text"},{"text":"They can also cross boundaries indirectly when captured by closures.","type":"text"}]},{"inlineContent":[{"type":"text","text":"When you call an asynchronous function with a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"different"}]},{"text":" isolation domain,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the parameters and return value need to cross a boundary."},{"text":" ","type":"text"},{"text":"Closures introduce many opportunities to cross isolation boundaries.","type":"text"},{"text":" ","type":"text"},{"text":"They can be created in one domain and then executed in another.","type":"text"},{"text":" ","type":"text"},{"text":"They can even be executed in multiple, different domains.","type":"text"}],"type":"paragraph"},{"text":"Sendable Types","level":3,"anchor":"Sendable-Types","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In some cases, all values of a particular type are safe to pass across"},{"text":" ","type":"text"},{"type":"text","text":"isolation boundaries because thread-safety is a property of the type itself."},{"text":" ","type":"text"},{"text":"This thread-safe property of types is represented by a conformance to the","type":"text"},{"type":"text","text":" "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" protocol."},{"text":" ","type":"text"},{"text":"When you see a conformance to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" in documentation,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"it means the given type is thread safe,"},{"type":"text","text":" "},{"text":"and values of the type can be shared across arbitrary isolation domains","type":"text"},{"type":"text","text":" "},{"type":"text","text":"without introducing a risk of data races."}]},{"inlineContent":[{"text":"Swift encourages using value types because they are naturally safe.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"With value types, different parts of your program can’t have"},{"type":"text","text":" "},{"text":"shared references to the same value.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"When you pass an instance of a value type to a function,"},{"text":" ","type":"text"},{"type":"text","text":"the function has its own independent copy of that value."},{"text":" ","type":"text"},{"text":"Because value semantics guarantees the absence of shared mutable state, value","type":"text"},{"type":"text","text":" "},{"type":"text","text":"types in Swift are implicitly "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" when all their stored properties"},{"text":" ","type":"text"},{"text":"are also Sendable.","type":"text"},{"type":"text","text":" "},{"text":"However, this implicit conformance is not visible outside of their","type":"text"},{"type":"text","text":" "},{"text":"defining module.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Making a class "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":" is part of its public API contract,"},{"type":"text","text":" "},{"text":"and must always be done explicitly.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum Ripeness {","    case hard","    case perfect","    case mushy(daysPast: Int)","}","","struct Pineapple {","    var weight: Double","    var ripeness: Ripeness","}"]},{"type":"paragraph","inlineContent":[{"text":"Here, both the ","type":"text"},{"code":"Ripeness","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Pineapple"},{"text":" types are implicitly ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":",","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"since they are composed entirely of "},{"type":"codeVoice","code":"Sendable"},{"text":" value types.","type":"text"}]},{"name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information see the "},{"isActive":true,"type":"reference","identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency#Sendable-Types"},{"type":"text","text":" section of"},{"text":" ","type":"text"},{"type":"text","text":"The Swift Programming Language."}]}],"type":"aside"},{"type":"heading","text":"Actor-Isolated Types","level":3,"anchor":"Actor-Isolated-Types"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Actors are not value types. But, because they protect all of their state"},{"type":"text","text":" "},{"type":"text","text":"in their own isolation domain,"},{"type":"text","text":" "},{"text":"they are inherently safe to pass across boundaries.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"This makes all actor types implicitly "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":", even if their properties"},{"text":" ","type":"text"},{"type":"text","text":"are not "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" themselves."}]},{"syntax":"swift","type":"codeListing","code":["actor Island {","    var flock: [Chicken]  \/\/ non-Sendable","    var food: [Pineapple] \/\/ Sendable","}"]},{"inlineContent":[{"type":"text","text":"Global-actor-isolated types are also implicitly "},{"type":"codeVoice","code":"Sendable"},{"text":" for similar reasons.","type":"text"},{"type":"text","text":" "},{"text":"They do not have a private, dedicated isolation domain, but their state is still","type":"text"},{"type":"text","text":" "},{"type":"text","text":"protected by an actor."}],"type":"paragraph"},{"syntax":"swift","code":["@MainActor","class ChickenValley {","    var flock: [Chicken]  \/\/ non-Sendable","    var food: [Pineapple] \/\/ Sendable","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Being "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":", actor and global-actor-isolated types are always safe"},{"text":" ","type":"text"},{"text":"to pass across isolation boundaries.","type":"text"}]},{"type":"heading","anchor":"Reference-Types","text":"Reference Types","level":3},{"type":"paragraph","inlineContent":[{"text":"Unlike value types, reference types cannot be implicitly ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."},{"text":" ","type":"text"},{"type":"text","text":"And while they can be made "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"doing so comes with a number of constraints."},{"text":" ","type":"text"},{"type":"text","text":"To make a class "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", it must contain no mutable state."},{"type":"text","text":" "},{"text":"And any immutable properties must also be ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Further, the compiler can only validate the implementation of final classes."}]},{"type":"codeListing","syntax":"swift","code":["final class Chicken: Sendable {","    let name: String","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is possible to satisfy the thread-safety requirements of "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" "},{"text":"using synchronization primitives that the compiler cannot reason about,","type":"text"},{"type":"text","text":" "},{"text":"such as through OS-specific constructs or","type":"text"},{"type":"text","text":" "},{"type":"text","text":"when working with thread-safe types implemented in C\/C++\/Objective-C."},{"type":"text","text":" "},{"text":"Such types may be marked as conforming to ","type":"text"},{"type":"codeVoice","code":"@unchecked Sendable"},{"type":"text","text":" to promise the"},{"type":"text","text":" "},{"type":"text","text":"compiler that the type is thread-safe."},{"type":"text","text":" "},{"text":"The compiler will not perform any checking on an ","type":"text"},{"type":"codeVoice","code":"@unchecked Sendable"},{"text":" type,","type":"text"},{"text":" ","type":"text"},{"text":"so this opt-out must be used with caution.","type":"text"}]},{"level":3,"text":"Suspension Points","anchor":"Suspension-Points","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A task can switch between isolation domains when a function in one"},{"type":"text","text":" "},{"type":"text","text":"domain calls a function in another."},{"text":" ","type":"text"},{"type":"text","text":"A call that crosses an isolation boundary must be made asynchronously,"},{"type":"text","text":" "},{"type":"text","text":"because the destination isolation domain might be busy running other tasks."},{"text":" ","type":"text"},{"text":"In that case, the task will be suspended until the destination isolation","type":"text"},{"text":" ","type":"text"},{"text":"domain is available.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Critically, a suspension point does "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"type":"text","text":" block."},{"text":" ","type":"text"},{"text":"The current isolation domain (and the thread it is running on)","type":"text"},{"type":"text","text":" "},{"text":"are freed up to perform other work.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"The Swift concurrency runtime expects code to never block on future work,"},{"text":" ","type":"text"},{"text":"allowing the system to always make forward progress.","type":"text"},{"text":" ","type":"text"},{"text":"This eliminates a common source of deadlocks in concurrent code.","type":"text"}]},{"code":["@MainActor","func stockUp() {","    \/\/ beginning execution on MainActor","    let food = Pineapple()","","    \/\/ switching to the island actor's domain","    await island.store(food)","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Potential suspension points are marked in source code with the ","type":"text"},{"type":"codeVoice","code":"await"},{"type":"text","text":" keyword."},{"type":"text","text":" "},{"type":"text","text":"Its presence indicates that the call might suspend at runtime."},{"text":" ","type":"text"},{"type":"text","text":"But, "},{"type":"codeVoice","code":"await"},{"type":"text","text":" does not force a suspension, and the function being called might"},{"type":"text","text":" "},{"text":"only suspend under certain dynamic conditions.","type":"text"},{"text":" ","type":"text"},{"text":"It’s possible that a call marked with ","type":"text"},{"type":"codeVoice","code":"await"},{"text":" doesn’t actually suspend.","type":"text"}]},{"level":3,"text":"Atomicity","anchor":"Atomicity","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"While actors do guarantee safety from data races, they do not ensure"},{"text":" ","type":"text"},{"text":"atomicity across suspension points.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Because the current isolation domain is freed up to perform other work,"},{"text":" ","type":"text"},{"type":"text","text":"actor-isolated state may change after an asynchronous call."},{"type":"text","text":" "},{"type":"text","text":"As a consequence, you can think of explicitly marking potential suspension"},{"type":"text","text":" "},{"text":"points as a way to indicate the end of a critical section.","type":"text"}]},{"code":["func deposit(pineapples: [Pineapple], onto island: Island) async {","   var food = await island.food","   food += pineapples","   await island.store(food)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"This code assumes, incorrectly, that the ","type":"text"},{"type":"codeVoice","code":"island"},{"type":"text","text":" actor’s "},{"code":"food","type":"codeVoice"},{"text":" value will not","type":"text"},{"type":"text","text":" "},{"text":"change between asynchronous calls.","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Critical sections should always be structured to run synchronously."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"For more information, see the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency\/#Defining-and-Calling-Asynchronous-Functions"},{"type":"text","text":" section of"},{"type":"text","text":" "},{"text":"The Swift Programming Language.","type":"text"}]}],"type":"aside","style":"note","name":"Note"}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"metadata":{"title":"Data Race Safety"},"hierarchy":{"paths":[["doc:\/\/org.swift.migration.6\/documentation\/MigrationGuide"]]},"abstract":[{"type":"text","text":"Learn about the fundamental concepts Swift uses to enable data-race-free"},{"type":"text","text":" "},{"type":"text","text":"concurrent code."}],"references":{"doc://org.swift.migration.6/documentation/MigrationGuide":{"role":"collection","abstract":[],"type":"topic","title":"Migrating to Swift 6","identifier":"doc:\/\/org.swift.migration.6\/documentation\/MigrationGuide","kind":"article","url":"\/documentation\/migrationguide"},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/closures":{"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/closures","title":"Closures","titleInlineContent":[{"type":"text","text":"Closures"}],"type":"link","url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/closures"},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/inheritance":{"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/inheritance","titleInlineContent":[{"type":"text","text":"Inheritance"}],"title":"Inheritance","url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/inheritance","type":"link"},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/protocols":{"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/protocols","title":"Protocols","titleInlineContent":[{"type":"text","text":"Protocols"}],"type":"link","url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/protocols"},"doc://org.swift.migration.6/documentation/Swift-6-Concurrency-Migration-Guide/IncrementalAdoption#Dynamic-Isolation":{"identifier":"doc:\/\/org.swift.migration.6\/documentation\/Swift-6-Concurrency-Migration-Guide\/IncrementalAdoption#Dynamic-Isolation","kind":"section","abstract":[],"title":"Dynamic Isolation","url":"\/documentation\/swift-6-concurrency-migration-guide\/incrementaladoption#Dynamic-Isolation","type":"topic"},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency/#Defining-and-Calling-Asynchronous-Functions":{"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency\/#Defining-and-Calling-Asynchronous-Functions","title":"Defining and Calling Asynchronous Functions","titleInlineContent":[{"type":"text","text":"Defining and Calling Asynchronous Functions"}],"type":"link","url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency\/#Defining-and-Calling-Asynchronous-Functions"},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency#Sendable-Types":{"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency#Sendable-Types","titleInlineContent":[{"type":"text","text":"Sendable Types"}],"title":"Sendable Types","url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency#Sendable-Types","type":"link"},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency#Tasks-and-Task-Groups":{"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency#Tasks-and-Task-Groups","title":"Tasks","titleInlineContent":[{"type":"text","text":"Tasks"}],"type":"link","url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency#Tasks-and-Task-Groups"},"https://docs.swift.org/swift-book/documentation/the-swift-programming-language/concurrency#Actors":{"identifier":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency#Actors","titleInlineContent":[{"type":"text","text":"Actors"}],"title":"Actors","url":"https:\/\/docs.swift.org\/swift-book\/documentation\/the-swift-programming-language\/concurrency#Actors","type":"link"}}}